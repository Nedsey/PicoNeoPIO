// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// neopxl //
// ------ //

#define neopxl_wrap_target 0
#define neopxl_wrap 11

#define neopxl_offset_entry_point 0u

static const uint16_t neopxl_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xe037, //  1: set    x, 23                      
    0xe001, //  2: set    pins, 1                    
    0x6541, //  3: out    y, 1                   [5] 
    0x0066, //  4: jmp    !y, 6                      
    0xa742, //  5: nop                           [7] 
    0xe500, //  6: set    pins, 0                [5] 
    0x0069, //  7: jmp    !y, 9                      
    0x000a, //  8: jmp    10                         
    0xa842, //  9: nop                           [8] 
    0x0042, // 10: jmp    x--, 2                     
    0x0000, // 11: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program neopxl_program = {
    .instructions = neopxl_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config neopxl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + neopxl_wrap_target, offset + neopxl_wrap);
    return c;
}

static inline void neopxl_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = neopxl_program_get_default_config(offset);
    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    sm_config_set_set_pins(&c, pin, 1);
    float divider = (float) clock_get_hz(clk_sys) / 20000000;
    sm_config_set_clkdiv(&c, divider);
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

